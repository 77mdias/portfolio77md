version: "3.8"

# ===================================
# Docker Compose para VPS Hostinger
# ===================================
# Deploy otimizado para produção

services:
  # Reverse Proxy com Nginx
  nginx:
    image: nginx:alpine
    container_name: app-nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/vps.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - certbot-etc:/etc/letsencrypt:ro
      - certbot-var:/var/lib/letsencrypt:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Banco de Dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: app-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-auth}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      # Configurações de performance
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./bun-auth/src/database/migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - app-network
    command:
      - "postgres"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "effective_cache_size=1GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=64MB"
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-auth}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend (Bun + Elysia)
  backend:
    build:
      context: ./bun-auth
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: app-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-auth}?schema=public&sslmode=disable
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
      - BETTER_AUTH_URL=${BETTER_AUTH_URL:-https://${DOMAIN}}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID:-}
      - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET:-}
      - PORT=3333
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3333/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Limites de recursos
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 128M

  # Frontend (React + Nginx)
  frontend:
    build:
      context: ./react-auth
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - VITE_BETTER_AUTH_URL=${BETTER_AUTH_URL:-https://${DOMAIN}}
    container_name: app-frontend
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Limites de recursos
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 64M

  # Certbot para SSL (Opcional)
  certbot:
    image: certbot/certbot:latest
    container_name: app-certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./nginx/ssl:/etc/nginx/ssl
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    profiles:
      - ssl

volumes:
  postgres_data:
    driver: local
  certbot-etc:
    driver: local
  certbot-var:
    driver: local

networks:
  app-network:
    driver: bridge

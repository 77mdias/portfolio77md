# Configuração para produção com domínio próprio
version: "3.8"

services:
  # Reverse Proxy (Nginx)
  nginx:
    image: nginx:alpine
    container_name: app-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  # Banco PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: app-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-auth}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - app-network
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-auth}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend
  backend:
    build:
      context: ./bun-auth
      dockerfile: Dockerfile
    container_name: app-backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-auth}
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
      - BETTER_AUTH_URL=https://${DOMAIN}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy

  # Frontend
  frontend:
    build:
      context: ./react-auth
      dockerfile: Dockerfile
    container_name: app-frontend
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - backend

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
